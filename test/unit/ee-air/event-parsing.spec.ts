import {z} from 'zod';
import {EeAirOutboundEventSchema} from '../../../src/types';
import {
  sampleEvents,
  expectedParsedSampleEvents,
} from '../../fixtures/ee-air-outbound-events';

describe('Eagle Eye AIR outbound event parsing', () => {
  describe('Successful event parsing', () => {
    it.each([
      [
        'POSCONNECT_WALLET_FULFIL_FINAL',
        sampleEvents['POSCONNECT_WALLET_FULFIL_FINAL'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_FULFIL_FINAL'],
      ],
      [
        'POSCONNECT_WALLET_FULFIL_INITIAL',
        sampleEvents['POSCONNECT_WALLET_FULFIL_INITIAL'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_FULFIL_INITIAL'],
      ],
      [
        'POSCONNECT_WALLET_FULFIL_MIDDLE',
        sampleEvents['POSCONNECT_WALLET_FULFIL_MIDDLE'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_FULFIL_MIDDLE'],
      ],
      [
        'POSCONNECT_WALLET_OPEN',
        sampleEvents['POSCONNECT_WALLET_OPEN'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_OPEN'],
      ],
      [
        'POSCONNECT_WALLET_REFUND_FULL',
        sampleEvents['POSCONNECT_WALLET_REFUND_FULL'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_REFUND_FULL'],
      ],
      [
        'POSCONNECT_WALLET_REFUND_PARTIAL',
        sampleEvents['POSCONNECT_WALLET_REFUND_PARTIAL'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_REFUND_PARTIAL'],
      ],
      [
        'POSCONNECT_WALLET_SETTLE',
        sampleEvents['POSCONNECT_WALLET_SETTLE'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_SETTLE'],
      ],
      [
        'SERVICE_TRIGGER_COUPON',
        sampleEvents['SERVICE_TRIGGER_COUPON'],
        expectedParsedSampleEvents['SERVICE_TRIGGER_COUPON'],
      ],
      [
        'SERVICE_TRIGGER_POINTS',
        sampleEvents['SERVICE_TRIGGER_POINTS'],
        expectedParsedSampleEvents['SERVICE_TRIGGER_POINTS'],
      ],
      [
        'SERVICE_WALLET_ACCOUNTS_CREATE',
        sampleEvents['SERVICE_WALLET_ACCOUNTS_CREATE'],
        expectedParsedSampleEvents['SERVICE_WALLET_ACCOUNTS_CREATE'],
      ],
      [
        'SERVICE_WALLET_CREATE',
        sampleEvents['SERVICE_WALLET_CREATE'],
        expectedParsedSampleEvents['SERVICE_WALLET_CREATE'],
      ],
      [
        'SPEND_POSCONNECT_WALLET_OPEN',
        sampleEvents['SPEND_POSCONNECT_WALLET_OPEN'],
        expectedParsedSampleEvents['SPEND_POSCONNECT_WALLET_OPEN'],
      ],
      [
        'SPEND_POSCONNECT_WALLET_SPEND',
        sampleEvents['SPEND_POSCONNECT_WALLET_SPEND'],
        expectedParsedSampleEvents['SPEND_POSCONNECT_WALLET_SPEND'],
      ],
      [
        'SPEND_POSCONNECT_WALLET_SPEND_VOID',
        sampleEvents['SPEND_POSCONNECT_WALLET_SPEND_VOID'],
        expectedParsedSampleEvents['SPEND_POSCONNECT_WALLET_SPEND_VOID'],
      ],
      [
        'SPEND_POSCONNECT_WALLET_SETTLE',
        sampleEvents['SPEND_POSCONNECT_WALLET_SETTLE'],
        expectedParsedSampleEvents['SPEND_POSCONNECT_WALLET_SETTLE'],
      ],
      [
        'TIER_MEMBERSHIP_ADJUST_NEGATIVE',
        sampleEvents['TIER_MEMBERSHIP_ADJUST_NEGATIVE'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_ADJUST_NEGATIVE'],
      ],
      [
        'TIER_MEMBERSHIP_ADJUST_POSITIVE',
        sampleEvents['TIER_MEMBERSHIP_ADJUST_POSITIVE'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_ADJUST_POSITIVE'],
      ],
      [
        'TIER_MEMBERSHIP_CREATE',
        sampleEvents['TIER_MEMBERSHIP_CREATE'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_CREATE'],
      ],
      [
        'TIER_MEMBERSHIP_CREDIT',
        sampleEvents['TIER_MEMBERSHIP_CREDIT'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_CREDIT'],
      ],
      [
        'TIER_MEMBERSHIP_DEBIT',
        sampleEvents['TIER_MEMBERSHIP_DEBIT'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_DEBIT'],
      ],
      [
        'TIER_MEMBERSHIP_MOVE',
        sampleEvents['TIER_MEMBERSHIP_MOVE'],
        expectedParsedSampleEvents['TIER_MEMBERSHIP_MOVE'],
      ],
      [
        'WALLET_ACCOUNT_CREATE_CAMPAIGN_MULTIPLE',
        sampleEvents['WALLET_ACCOUNT_CREATE_CAMPAIGN_MULTIPLE'],
        expectedParsedSampleEvents['WALLET_ACCOUNT_CREATE_CAMPAIGN_MULTIPLE'],
      ],
      [
        'WALLET_ACCOUNT_CREATE_CAMPAIGN_SINGLE',
        sampleEvents['WALLET_ACCOUNT_CREATE_CAMPAIGN_SINGLE'],
        expectedParsedSampleEvents['WALLET_ACCOUNT_CREATE_CAMPAIGN_SINGLE'],
      ],
      [
        'WALLET_ACCOUNT_CREATE_PLAN',
        sampleEvents['WALLET_ACCOUNT_CREATE_PLAN'],
        expectedParsedSampleEvents['WALLET_ACCOUNT_CREATE_PLAN'],
      ],
      [
        'WALLET_ACCOUNT_CREATE_SCHEME',
        sampleEvents['WALLET_ACCOUNT_CREATE_SCHEME'],
        expectedParsedSampleEvents['WALLET_ACCOUNT_CREATE_SCHEME'],
      ],
      [
        'WALLET_ACCOUNT_UPDATE',
        sampleEvents['WALLET_ACCOUNT_UPDATE'],
        expectedParsedSampleEvents['WALLET_ACCOUNT_UPDATE'],
      ],
      [
        'WALLET_CONSUMER_CREATE',
        sampleEvents['WALLET_CONSUMER_CREATE'],
        expectedParsedSampleEvents['WALLET_CONSUMER_CREATE'],
      ],
      [
        'WALLET_CONSUMER_UPDATE',
        sampleEvents['WALLET_CONSUMER_UPDATE'],
        expectedParsedSampleEvents['WALLET_CONSUMER_UPDATE'],
      ],
      [
        'POSCONNECT_WALLET_REFUND_TEST_01',
        sampleEvents['POSCONNECT_WALLET_REFUND_TEST_01'],
        expectedParsedSampleEvents['POSCONNECT_WALLET_REFUND_TEST_01'],
      ],
    ])(
      'parses an %s successfully',
      (_eventName: string, sampleEvent, expectedParsedSampleEvent) => {
        const parsedEvent = EeAirOutboundEventSchema.parse(sampleEvent);

        expect(parsedEvent).toEqual(expectedParsedSampleEvent);
      },
    );
  });

  describe('Parsing of invalid events', () => {
    it('throws an error if enrichment data is missing from a TIER_MEMBERSHIP_CREATE', () => {
      expect(() =>
        EeAirOutboundEventSchema.parse(
          sampleEvents['INVALID_TIER_MEMBERSHIP_CREATE_NO_ENRICHMENT_DATA'],
        ),
      ).toThrow(z.ZodError);
    });
  });
});
